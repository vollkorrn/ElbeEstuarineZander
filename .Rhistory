#https://support.bioconductor.org/p/128407/ credits to SamWhite
# Add self-matching GOIDs to "ids" column, if not present
for (go_id in go_ids) {
# Check if the go_id is present in the row names
if (go_id %in% rownames(slimdf)) {
# Check if the go_id is not present in the ids column
# Also removes white space "trimws()" and converts all to upper case to handle
# any weird, "invisible" formatting issues.
if (!go_id %in% trimws(toupper(strsplit(slimdf[go_id, "ids"], ";")[[1]]))) {
# Append the go_id to the ids column with a semi-colon separator
if (length(slimdf$ids) > 0 && nchar(slimdf$ids[nrow(slimdf)]) > 0) {
slimdf[go_id, "ids"] <- paste0(slimdf[go_id, "ids"], "; ", go_id)
} else {
slimdf[go_id, "ids"] <- go_id
}}}}
rm(go_id)
SLIMGO_mouse[[a+1]] <- slimdf
names(SLIMGO_mouse)[[a+1]] <- paste("slim", ii, sep="_")
rm(slimdf)
rm(a)
}
SLIMGO_generic<-list()
for (iii in names(Tissue_EGO_List)) {
require(GSEABase)
a <- length(SLIMGO_generic)
# Vector of GO IDs
go_ids <- Tissue_EGO_List[[iii]]$ID
# Create GSEAbase GOCollection using `go_ids`
myCollection <- GOCollection(go_ids)
# Retrieve GOslims from GO OBO file set
#slim <- getOBOCollection(gseabase_files)
#Download GO SLIM#
#http://geneontology.org/docs/download-ontology/
#Move obo dataset into GSEAbase package library
#mv /Users/admin/Downloads/goslim_agr.obo /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/GSEABase/extdata
#mv /Users/admin/Downloads/goslim_mouse.obo /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/GSEABase/extdata
fl <- system.file("extdata", "goslim_generic.obo", package="GSEABase")
slim <- getOBOCollection(fl)
slimdf <- goSlim(myCollection, slim, "BP", verbose)
# List of GOslims and all GO IDs from `go_ids`
gomap <- as.list(GOBPOFFSPRING[rownames(slimdf)])
# Maps `go_ids` to matching GOslims
mapped <- lapply(gomap, intersect, ids(myCollection))
# Append all mapped GO IDs to `slimdf`
# `sapply` needed to apply paste() to create semi-colon delimited values
slimdf$ids <- sapply(lapply(gomap, intersect, ids(myCollection)), paste, collapse=";")
# Remove "character(0) string from "ids" column
slimdf$ids[slimdf$ids == "character(0)"] <- ""
#https://support.bioconductor.org/p/128407/ credits to SamWhite
# Add self-matching GOIDs to "ids" column, if not present
for (go_id in go_ids) {
# Check if the go_id is present in the row names
if (go_id %in% rownames(slimdf)) {
# Check if the go_id is not present in the ids column
# Also removes white space "trimws()" and converts all to upper case to handle
# any weird, "invisible" formatting issues.
if (!go_id %in% trimws(toupper(strsplit(slimdf[go_id, "ids"], ";")[[1]]))) {
# Append the go_id to the ids column with a semi-colon separator
if (length(slimdf$ids) > 0 && nchar(slimdf$ids[nrow(slimdf)]) > 0) {
slimdf[go_id, "ids"] <- paste0(slimdf[go_id, "ids"], "; ", go_id)
} else {
slimdf[go_id, "ids"] <- go_id
rm(go_id)
}}}}
SLIMGO_generic[[a+1]] <- slimdf
names(SLIMGO_generic)[[a+1]] <- paste("slim", iii, sep="_")
rm(slimdf)
rm(a)
}
SLIMGO_pir<-list()
for (iiii in names(Tissue_EGO_List )) {
require(GSEABase)
a <- length(SLIMGO_pir)
# Vector of GO IDs
go_ids <- Tissue_EGO_List[[iiii]]$ID
# Create GSEAbase GOCollection using `go_ids`
myCollection <- GOCollection(go_ids)
# Retrieve GOslims from GO OBO file set
#slim <- getOBOCollection(gseabase_files)
#Download GO SLIM#
#http://geneontology.org/docs/download-ontology/
#Move obo dataset into GSEAbase package library
#mv /Users/admin/Downloads/goslim_agr.obo /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/GSEABase/extdata
#mv /Users/admin/Downloads/goslim_mouse.obo /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/GSEABase/extdata
fl <- system.file("extdata", "goslim_pir.obo", package="GSEABase")
slim <- getOBOCollection(fl)
slimdf <- goSlim(myCollection, slim, "BP", verbose)
# List of GOslims and all GO IDs from `go_ids`
gomap <- as.list(GOBPOFFSPRING[rownames(slimdf)])
# Maps `go_ids` to matching GOslims
mapped <- lapply(gomap, intersect, ids(myCollection))
# Append all mapped GO IDs to `slimdf`
# `sapply` needed to apply paste() to create semi-colon delimited values
slimdf$ids <- sapply(lapply(gomap, intersect, ids(myCollection)), paste, collapse=";")
# Remove "character(0) string from "ids" column
slimdf$ids[slimdf$ids == "character(0)"] <- ""
#https://support.bioconductor.org/p/128407/ credits to SamWhite
# Add self-matching GOIDs to "ids" column, if not present
for (go_id in go_ids) {
# Check if the go_id is present in the row names
if (go_id %in% rownames(slimdf)) {
# Check if the go_id is not present in the ids column
# Also removes white space "trimws()" and converts all to upper case to handle
# any weird, "invisible" formatting issues.
if (!go_id %in% trimws(toupper(strsplit(slimdf[go_id, "ids"], ";")[[1]]))) {
# Append the go_id to the ids column with a semi-colon separator
if (length(slimdf$ids) > 0 && nchar(slimdf$ids[nrow(slimdf)]) > 0) {
slimdf[go_id, "ids"] <- paste0(slimdf[go_id, "ids"], "; ", go_id)
} else {
slimdf[go_id, "ids"] <- go_id
}}}}
rm(go_id)
SLIMGO_pir[[a+1]] <- slimdf
names(SLIMGO_pir)[[a+1]] <- paste("slim", iiii, sep="_")
rm(slimdf)
rm(a)
}
#Clean Data#
# Remove empty list elements
SLIMGO_mouse <- keep(map(SLIMGO_mouse, ~ filter(.x, Count != 0)), ~ nrow(.) > 0)
sapply(SLIMGO_mouse,dim)
SLIMGO_generic <- keep(map(SLIMGO_generic, ~ filter(.x, Count != 0)), ~ nrow(.) > 0)
sapply(SLIMGO_generic,dim)
SLIMGO_pir <- keep(map(SLIMGO_pir, ~ filter(.x, Count != 0)), ~ nrow(.) > 0)
sapply(SLIMGO_pir,dim)
##########
#SLIMKEGG#
##########
KeggPathwayMapsGenes <- readRDS(file = paste0(file.path(path_Input_RNA,
"KeggPathwayMapsGenes08.05.2023"), ".rds"))
KeggPathwayMapsGenes$ID <- KeggPathwayMapsGenes$PathwayID
Tissue_KEGG_List <- ORA_list[[g]]$KEGGS
Tissue_KEGG_List <- Tissue_KEGG_List[sapply(Tissue_KEGG_List, function(x) length(x) > 0)]
SLIMKEGG<-list()
for (x in names(Tissue_KEGG_List)) {
aa <- length(SLIMKEGG)
A <- as.data.frame(Tissue_KEGG_List[[x]])
A <- dplyr::left_join(A, KeggPathwayMapsGenes[KeggPathwayMapsGenes$ID %in% A$ID,])
SLIMKEGG[[aa+1]] <- A
names(SLIMKEGG)[[aa+1]] <- paste("slim", x, sep="_")
}
sapply(SLIMKEGG ,dim)
filtered_list <- map(SLIMKEGG, ~ filter(.x, Count != 0))
# Remove empty list elements
SLIMKEGG <- keep(filtered_list, ~ nrow(.) > 0)
sapply(SLIMKEGG,dim)
ORA_list[[WGCNAset]]$SLIMGO_mouse    <- SLIMGO_mouse
ORA_list[[WGCNAset]]$SLIMGO_generic  <- SLIMGO_generic
ORA_list[[WGCNAset]]$SLIMGO_pir      <- SLIMGO_pir
ORA_list[[WGCNAset]]$SLIMKEGG        <- SLIMKEGG
}
Tissue_EGO_List <- ORA_list[[WGCNAset]]$EGOS
Tissue_EGO_List <- Tissue_EGO_List[sapply(Tissue_EGO_List, function(x) length(x) > 0)]
names(Tissue_EGO_List)
ii <- "ego_ME2"
a <- length(SLIMGO_mouse)
# Vector of GO IDs
go_ids <- Tissue_EGO_List[[ii]]$ID
# Create GSEAbase GOCollection using `go_ids`
myCollection <- GOCollection(go_ids)
# Retrieve GOslims from GO OBO file set
#slim <- getOBOCollection(gseabase_files)
#Download GO SLIM#
#http://geneontology.org/docs/download-ontology/
#Move obo dataset into GSEAbase package library
#mv /Users/admin/Downloads/goslim_agr.obo /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/GSEABase/extdata
#mv /Users/admin/Downloads/goslim_mouse.obo /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/GSEABase/extdata
fl <- system.file("extdata", "goslim_mouse.obo", package="GSEABase")
slim <- getOBOCollection(fl)
slimdf <- goSlim(myCollection, slim, "BP", verbose)
# List of GOslims and all GO IDs from `go_ids`
gomap <- as.list(GOBPOFFSPRING[rownames(slimdf)])
# Maps `go_ids` to matching GOslims
mapped <- lapply(gomap, intersect, ids(myCollection))
# Append all mapped GO IDs to `slimdf`
# `sapply` needed to apply paste() to create semi-colon delimited values
slimdf$ids <- sapply(lapply(gomap, intersect, ids(myCollection)), paste, collapse=";")
# Remove "character(0) string from "ids" column
slimdf$ids[slimdf$ids == "character(0)"] <- ""
#https://support.bioconductor.org/p/128407/ credits to SamWhite
# Add self-matching GOIDs to "ids" column, if not present
for (go_id in go_ids) {
# Check if the go_id is present in the row names
if (go_id %in% rownames(slimdf)) {
# Check if the go_id is not present in the ids column
# Also removes white space "trimws()" and converts all to upper case to handle
# any weird, "invisible" formatting issues.
if (!go_id %in% trimws(toupper(strsplit(slimdf[go_id, "ids"], ";")[[1]]))) {
# Append the go_id to the ids column with a semi-colon separator
if (length(slimdf$ids) > 0 && nchar(slimdf$ids[nrow(slimdf)]) > 0) {
slimdf[go_id, "ids"] <- paste0(slimdf[go_id, "ids"], "; ", go_id)
} else {
slimdf[go_id, "ids"] <- go_id
}}}}
rm(go_id)
SLIMGO_mouse[[a+1]] <- slimdf
names(SLIMGO_mouse)[[a+1]] <- paste("slim", ii, sep="_")
rm(slimdf)
rm(a)
}
SLIMGO_mouse <-list()
for (ii in names(Tissue_EGO_List)) {
require(GSEABase)
a <- length(SLIMGO_mouse)
# Vector of GO IDs
go_ids <- Tissue_EGO_List[[ii]]$ID
# Create GSEAbase GOCollection using `go_ids`
myCollection <- GOCollection(go_ids)
# Retrieve GOslims from GO OBO file set
#slim <- getOBOCollection(gseabase_files)
#Download GO SLIM#
#http://geneontology.org/docs/download-ontology/
#Move obo dataset into GSEAbase package library
#mv /Users/admin/Downloads/goslim_agr.obo /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/GSEABase/extdata
#mv /Users/admin/Downloads/goslim_mouse.obo /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/GSEABase/extdata
fl <- system.file("extdata", "goslim_mouse.obo", package="GSEABase")
slim <- getOBOCollection(fl)
slimdf <- goSlim(myCollection, slim, "BP", verbose)
# List of GOslims and all GO IDs from `go_ids`
gomap <- as.list(GOBPOFFSPRING[rownames(slimdf)])
# Maps `go_ids` to matching GOslims
mapped <- lapply(gomap, intersect, ids(myCollection))
# Append all mapped GO IDs to `slimdf`
# `sapply` needed to apply paste() to create semi-colon delimited values
slimdf$ids <- sapply(lapply(gomap, intersect, ids(myCollection)), paste, collapse=";")
# Remove "character(0) string from "ids" column
slimdf$ids[slimdf$ids == "character(0)"] <- ""
#https://support.bioconductor.org/p/128407/ credits to SamWhite
# Add self-matching GOIDs to "ids" column, if not present
for (go_id in go_ids) {
# Check if the go_id is present in the row names
if (go_id %in% rownames(slimdf)) {
# Check if the go_id is not present in the ids column
# Also removes white space "trimws()" and converts all to upper case to handle
# any weird, "invisible" formatting issues.
if (!go_id %in% trimws(toupper(strsplit(slimdf[go_id, "ids"], ";")[[1]]))) {
# Append the go_id to the ids column with a semi-colon separator
if (length(slimdf$ids) > 0 && nchar(slimdf$ids[nrow(slimdf)]) > 0) {
slimdf[go_id, "ids"] <- paste0(slimdf[go_id, "ids"], "; ", go_id)
} else {
slimdf[go_id, "ids"] <- go_id
}}}}
rm(go_id)
SLIMGO_mouse[[a+1]] <- slimdf
names(SLIMGO_mouse)[[a+1]] <- paste("slim", ii, sep="_")
rm(slimdf)
rm(a)
}
SLIMGO_generic<-list()
for (iii in names(Tissue_EGO_List)) {
require(GSEABase)
a <- length(SLIMGO_generic)
# Vector of GO IDs
go_ids <- Tissue_EGO_List[[iii]]$ID
# Create GSEAbase GOCollection using `go_ids`
myCollection <- GOCollection(go_ids)
# Retrieve GOslims from GO OBO file set
#slim <- getOBOCollection(gseabase_files)
#Download GO SLIM#
#http://geneontology.org/docs/download-ontology/
#Move obo dataset into GSEAbase package library
#mv /Users/admin/Downloads/goslim_agr.obo /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/GSEABase/extdata
#mv /Users/admin/Downloads/goslim_mouse.obo /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/GSEABase/extdata
fl <- system.file("extdata", "goslim_generic.obo", package="GSEABase")
slim <- getOBOCollection(fl)
slimdf <- goSlim(myCollection, slim, "BP", verbose)
# List of GOslims and all GO IDs from `go_ids`
gomap <- as.list(GOBPOFFSPRING[rownames(slimdf)])
# Maps `go_ids` to matching GOslims
mapped <- lapply(gomap, intersect, ids(myCollection))
# Append all mapped GO IDs to `slimdf`
# `sapply` needed to apply paste() to create semi-colon delimited values
slimdf$ids <- sapply(lapply(gomap, intersect, ids(myCollection)), paste, collapse=";")
# Remove "character(0) string from "ids" column
slimdf$ids[slimdf$ids == "character(0)"] <- ""
#https://support.bioconductor.org/p/128407/ credits to SamWhite
# Add self-matching GOIDs to "ids" column, if not present
for (go_id in go_ids) {
# Check if the go_id is present in the row names
if (go_id %in% rownames(slimdf)) {
# Check if the go_id is not present in the ids column
# Also removes white space "trimws()" and converts all to upper case to handle
# any weird, "invisible" formatting issues.
if (!go_id %in% trimws(toupper(strsplit(slimdf[go_id, "ids"], ";")[[1]]))) {
# Append the go_id to the ids column with a semi-colon separator
if (length(slimdf$ids) > 0 && nchar(slimdf$ids[nrow(slimdf)]) > 0) {
slimdf[go_id, "ids"] <- paste0(slimdf[go_id, "ids"], "; ", go_id)
} else {
slimdf[go_id, "ids"] <- go_id
rm(go_id)
}}}}
SLIMGO_generic[[a+1]] <- slimdf
names(SLIMGO_generic)[[a+1]] <- paste("slim", iii, sep="_")
rm(slimdf)
rm(a)
}
SLIMGO_mouse <- keep(map(SLIMGO_mouse, ~ filter(.x, Count != 0)), ~ nrow(.) > 0)
SLIMGO_generic <- keep(map(SLIMGO_generic, ~ filter(.x, Count != 0)), ~ nrow(.) > 0)
KeggPathwayMapsGenes <- readRDS(file = paste0(file.path(path_Input_RNA,
"KeggPathwayMapsGenes08.05.2023"), ".rds"))
KeggPathwayMapsGenes$ID <- KeggPathwayMapsGenes$PathwayID
Tissue_KEGG_List <- ORA_list[[g]]$KEGGS
Tissue_KEGG_List <- Tissue_KEGG_List[sapply(Tissue_KEGG_List, function(x) length(x) > 0)]
SLIMKEGG<-list()
for (x in names(Tissue_KEGG_List)) {
aa <- length(SLIMKEGG)
A <- as.data.frame(Tissue_KEGG_List[[x]])
A <- dplyr::left_join(A, KeggPathwayMapsGenes[KeggPathwayMapsGenes$ID %in% A$ID,])
SLIMKEGG[[aa+1]] <- A
names(SLIMKEGG)[[aa+1]] <- paste("slim", x, sep="_")
}
sapply(SLIMKEGG ,dim)
filtered_list <- map(SLIMKEGG, ~ filter(.x, Count != 0))
# Remove empty list elements
SLIMKEGG <- keep(filtered_list, ~ nrow(.) > 0)
sapply(SLIMKEGG,dim)
ORA_list[[WGCNAset]]$SLIMGO_mouse    <- SLIMGO_mouse
ORA_list[[WGCNAset]]$SLIMGO_generic  <- SLIMGO_generic
#ORA_list[[WGCNAset]]$SLIMGO_pir      <- SLIMGO_pir
ORA_list[[WGCNAset]]$SLIMKEGG        <- SLIMKEGG
for (WGCNAset in names(ORA_list)) {
Tissue <- sub(paste0(".*", "(Gill|Liver)", ".*"), "\\1", WGCNAset)
Type   <- sub(paste0(".*", "(RNA|SSU)", ".*"), "\\1", WGCNAset)
g <- WGCNAset
########
#SLIMGO#
########
Tissue_EGO_List <- ORA_list[[WGCNAset]]$EGOS
Tissue_EGO_List <- Tissue_EGO_List[sapply(Tissue_EGO_List, function(x) length(x) > 0)]
SLIMGO_mouse <-list()
for (ii in names(Tissue_EGO_List)) {
require(GSEABase)
a <- length(SLIMGO_mouse)
# Vector of GO IDs
go_ids <- Tissue_EGO_List[[ii]]$ID
# Create GSEAbase GOCollection using `go_ids`
myCollection <- GOCollection(go_ids)
# Retrieve GOslims from GO OBO file set
#slim <- getOBOCollection(gseabase_files)
#Download GO SLIM#
#http://geneontology.org/docs/download-ontology/
#Move obo dataset into GSEAbase package library
#mv /Users/admin/Downloads/goslim_agr.obo /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/GSEABase/extdata
#mv /Users/admin/Downloads/goslim_mouse.obo /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/GSEABase/extdata
fl <- system.file("extdata", "goslim_mouse.obo", package="GSEABase")
slim <- getOBOCollection(fl)
slimdf <- goSlim(myCollection, slim, "BP", verbose)
# List of GOslims and all GO IDs from `go_ids`
gomap <- as.list(GOBPOFFSPRING[rownames(slimdf)])
# Maps `go_ids` to matching GOslims
mapped <- lapply(gomap, intersect, ids(myCollection))
# Append all mapped GO IDs to `slimdf`
# `sapply` needed to apply paste() to create semi-colon delimited values
slimdf$ids <- sapply(lapply(gomap, intersect, ids(myCollection)), paste, collapse=";")
# Remove "character(0) string from "ids" column
slimdf$ids[slimdf$ids == "character(0)"] <- ""
#https://support.bioconductor.org/p/128407/ credits to SamWhite
# Add self-matching GOIDs to "ids" column, if not present
for (go_id in go_ids) {
# Check if the go_id is present in the row names
if (go_id %in% rownames(slimdf)) {
# Check if the go_id is not present in the ids column
# Also removes white space "trimws()" and converts all to upper case to handle
# any weird, "invisible" formatting issues.
if (!go_id %in% trimws(toupper(strsplit(slimdf[go_id, "ids"], ";")[[1]]))) {
# Append the go_id to the ids column with a semi-colon separator
if (length(slimdf$ids) > 0 && nchar(slimdf$ids[nrow(slimdf)]) > 0) {
slimdf[go_id, "ids"] <- paste0(slimdf[go_id, "ids"], "; ", go_id)
} else {
slimdf[go_id, "ids"] <- go_id
}}}}
rm(go_id)
SLIMGO_mouse[[a+1]] <- slimdf
names(SLIMGO_mouse)[[a+1]] <- paste("slim", ii, sep="_")
rm(slimdf)
rm(a)
}
SLIMGO_generic<-list()
for (iii in names(Tissue_EGO_List)) {
require(GSEABase)
a <- length(SLIMGO_generic)
# Vector of GO IDs
go_ids <- Tissue_EGO_List[[iii]]$ID
# Create GSEAbase GOCollection using `go_ids`
myCollection <- GOCollection(go_ids)
# Retrieve GOslims from GO OBO file set
#slim <- getOBOCollection(gseabase_files)
#Download GO SLIM#
#http://geneontology.org/docs/download-ontology/
#Move obo dataset into GSEAbase package library
#mv /Users/admin/Downloads/goslim_agr.obo /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/GSEABase/extdata
#mv /Users/admin/Downloads/goslim_mouse.obo /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/GSEABase/extdata
fl <- system.file("extdata", "goslim_generic.obo", package="GSEABase")
slim <- getOBOCollection(fl)
slimdf <- goSlim(myCollection, slim, "BP", verbose)
# List of GOslims and all GO IDs from `go_ids`
gomap <- as.list(GOBPOFFSPRING[rownames(slimdf)])
# Maps `go_ids` to matching GOslims
mapped <- lapply(gomap, intersect, ids(myCollection))
# Append all mapped GO IDs to `slimdf`
# `sapply` needed to apply paste() to create semi-colon delimited values
slimdf$ids <- sapply(lapply(gomap, intersect, ids(myCollection)), paste, collapse=";")
# Remove "character(0) string from "ids" column
slimdf$ids[slimdf$ids == "character(0)"] <- ""
#https://support.bioconductor.org/p/128407/ credits to SamWhite
# Add self-matching GOIDs to "ids" column, if not present
for (go_id in go_ids) {
# Check if the go_id is present in the row names
if (go_id %in% rownames(slimdf)) {
# Check if the go_id is not present in the ids column
# Also removes white space "trimws()" and converts all to upper case to handle
# any weird, "invisible" formatting issues.
if (!go_id %in% trimws(toupper(strsplit(slimdf[go_id, "ids"], ";")[[1]]))) {
# Append the go_id to the ids column with a semi-colon separator
if (length(slimdf$ids) > 0 && nchar(slimdf$ids[nrow(slimdf)]) > 0) {
slimdf[go_id, "ids"] <- paste0(slimdf[go_id, "ids"], "; ", go_id)
} else {
slimdf[go_id, "ids"] <- go_id
rm(go_id)
}}}}
SLIMGO_generic[[a+1]] <- slimdf
names(SLIMGO_generic)[[a+1]] <- paste("slim", iii, sep="_")
rm(slimdf)
rm(a)
}
#   SLIMGO_pir<-list()
#     for (iiii in names(Tissue_EGO_List )) {
#     require(GSEABase)
#     a <- length(SLIMGO_pir)
#     # Vector of GO IDs
#     go_ids <- Tissue_EGO_List[[iiii]]$ID
#     # Create GSEAbase GOCollection using `go_ids`
#     myCollection <- GOCollection(go_ids)
#     # Retrieve GOslims from GO OBO file set
#     #slim <- getOBOCollection(gseabase_files)
#     #Download GO SLIM#
#     #http://geneontology.org/docs/download-ontology/
#     #Move obo dataset into GSEAbase package library
#     #mv /Users/admin/Downloads/goslim_agr.obo /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/GSEABase/extdata
# #mv /Users/admin/Downloads/goslim_mouse.obo /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/GSEABase/extdata
#     fl <- system.file("extdata", "goslim_pir.obo", package="GSEABase")
#     slim <- getOBOCollection(fl)
#     slimdf <- goSlim(myCollection, slim, "BP", verbose)
#     # List of GOslims and all GO IDs from `go_ids`
#     gomap <- as.list(GOBPOFFSPRING[rownames(slimdf)])
#     # Maps `go_ids` to matching GOslims
#     mapped <- lapply(gomap, intersect, ids(myCollection))
#     # Append all mapped GO IDs to `slimdf`
#     # `sapply` needed to apply paste() to create semi-colon delimited values
#     slimdf$ids <- sapply(lapply(gomap, intersect, ids(myCollection)), paste, collapse=";")
#     # Remove "character(0) string from "ids" column
#     slimdf$ids[slimdf$ids == "character(0)"] <- ""
#     #https://support.bioconductor.org/p/128407/ credits to SamWhite
#     # Add self-matching GOIDs to "ids" column, if not present
#     for (go_id in go_ids) {
#     # Check if the go_id is present in the row names
#     if (go_id %in% rownames(slimdf)) {
#     # Check if the go_id is not present in the ids column
#     # Also removes white space "trimws()" and converts all to upper case to handle
#     # any weird, "invisible" formatting issues.
#     if (!go_id %in% trimws(toupper(strsplit(slimdf[go_id, "ids"], ";")[[1]]))) {
#     # Append the go_id to the ids column with a semi-colon separator
#       if (length(slimdf$ids) > 0 && nchar(slimdf$ids[nrow(slimdf)]) > 0) {
#       slimdf[go_id, "ids"] <- paste0(slimdf[go_id, "ids"], "; ", go_id)
#       } else {
#       slimdf[go_id, "ids"] <- go_id
#       }}}}
# rm(go_id)
# SLIMGO_pir[[a+1]] <- slimdf
# names(SLIMGO_pir)[[a+1]] <- paste("slim", iiii, sep="_")
# rm(slimdf)
# rm(a)
#}
#Clean Data#
# Remove empty list elements
SLIMGO_mouse <- keep(map(SLIMGO_mouse, ~ filter(.x, Count != 0)), ~ nrow(.) > 0)
#sapply(SLIMGO_mouse,dim)
SLIMGO_generic <- keep(map(SLIMGO_generic, ~ filter(.x, Count != 0)), ~ nrow(.) > 0)
#sapply(SLIMGO_generic,dim)
#SLIMGO_pir <- keep(map(SLIMGO_pir, ~ filter(.x, Count != 0)), ~ nrow(.) > 0)
#sapply(SLIMGO_pir,dim)
##########
#SLIMKEGG#
##########
KeggPathwayMapsGenes <- readRDS(file = paste0(file.path(path_Input_RNA,
"KeggPathwayMapsGenes08.05.2023"), ".rds"))
KeggPathwayMapsGenes$ID <- KeggPathwayMapsGenes$PathwayID
Tissue_KEGG_List <- ORA_list[[g]]$KEGGS
Tissue_KEGG_List <- Tissue_KEGG_List[sapply(Tissue_KEGG_List, function(x) length(x) > 0)]
SLIMKEGG<-list()
for (x in names(Tissue_KEGG_List)) {
aa <- length(SLIMKEGG)
A <- as.data.frame(Tissue_KEGG_List[[x]])
A <- dplyr::left_join(A, KeggPathwayMapsGenes[KeggPathwayMapsGenes$ID %in% A$ID,])
SLIMKEGG[[aa+1]] <- A
names(SLIMKEGG)[[aa+1]] <- paste("slim", x, sep="_")
}
#sapply(SLIMKEGG ,dim)
filtered_list <- map(SLIMKEGG, ~ filter(.x, Count != 0))
# Remove empty list elements
SLIMKEGG <- keep(filtered_list, ~ nrow(.) > 0)
#sapply(SLIMKEGG,dim)
ORA_list[[WGCNAset]]$SLIMGO_mouse    <- SLIMGO_mouse
ORA_list[[WGCNAset]]$SLIMGO_generic  <- SLIMGO_generic
#ORA_list[[WGCNAset]]$SLIMGO_pir      <- SLIMGO_pir
ORA_list[[WGCNAset]]$SLIMKEGG        <- SLIMKEGG
}
saveRDS(ORA_list$Gill_RNA_WGCNA_MODULES_Corr_Filter_0.8, file = paste0(file.path(path_Output_WGCNA, paste(paste(Species, Year, Season, Analysis, "ORA_list_Gill", Corr_Filter, Date, sep="_"), ".rds", sep=""))))
saveRDS(ORA_list$Liver_RNA_WGCNA_MODULES_Corr_Filter_0.8, file = paste0(file.path(path_Output_WGCNA, paste(paste(Species, Year, Season, Analysis, "ORA_list_Liver", Corr_Filter, Date, sep="_"), ".rds", sep=""))))
ORA_list <- list()
ORA_list$Gill_RNA_WGCNA_MODULES_Corr_Filter_0.8 <- readRDS(file = paste0(file.path(path_Output_WGCNA, paste(paste(Species, Year, Season, Analysis, "ORA_list_Gill", Corr_Filter, Date, sep="_"), ".rds", sep=""))))
ORA_list$Liver_RNA_WGCNA_MODULES_Corr_Filter_0.8 <- readRDS(file = paste0(file.path(path_Output_WGCNA, paste(paste(Species, Year, Season, Analysis, "ORA_list_Liver", Corr_Filter, Date, sep="_"), ".rds", sep=""))))
